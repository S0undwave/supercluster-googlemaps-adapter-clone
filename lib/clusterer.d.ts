/// <reference types="googlemaps" />
import { Builder } from './builder';
import { IStyle, ISuperClusterAdapter } from './interfaces';
import Supercluster from 'supercluster';
import * as GeoJSON from 'geojson';
export declare class SuperClusterAdapter implements ISuperClusterAdapter {
    private pMap;
    private pRadius;
    private pMinZoom;
    private pMaxZoom;
    private pStyles;
    private pImagePath;
    private pImageExtension;
    private pZoomOnClick;
    private pDataLayerDefault;
    private pMarkers;
    private pIdleListener;
    private pIndex;
    private pointFeatures;
    private pNonPointFeatures;
    private pCustomMarkerIcon;
    private pCustomClusterIcon;
    private pUpdateMarkerOptions;
    private pMarkerClick;
    private pFeatureClick;
    private pClusterClick;
    private pFeatureStyle;
    private pServerSideFeatureToSuperCluster;
    private pOverlapMarkerSpiderfier;
    private pUseServerSideClusterer;
    private pGetClustersServerSide;
    constructor(build: Builder);
    get map(): google.maps.Map;
    get radius(): number;
    get maxZoom(): number;
    get minZoom(): number;
    get styles(): IStyle[];
    set styles(styles: IStyle[]);
    get imagePath(): string;
    get imageExtension(): string;
    get isZoomOnClick(): boolean;
    get numFeatures(): number;
    get hasFeatures(): boolean;
    get features(): Supercluster.PointFeature<Supercluster.AnyProps>[];
    get useServerSideClusterer(): boolean;
    setVisible(v: boolean): void;
    setVisibleMarkersAndClusters(v: boolean): void;
    setVisibleDataLayerFeatures(v: boolean): void;
    getFeaturesBounds(): google.maps.LatLngBounds;
    destroy(): void;
    load(geoJson: GeoJSON.FeatureCollection): void;
    drawServerSideCalculatedClusters(features: any[]): void;
    static get Builder(): typeof Builder;
    private getClusters;
    private init;
    private setupStyles;
    private addEventListeners;
    private removeEventListeners;
    private drawClusters;
    private getClustersMap;
    private getMarkersMap;
    private findExistingMarkerInstance;
    private clearNonPointFeatures;
    private superclusterFeatureToGmapsMarker;
    private getMarkerOptions;
    private getMarkerOptionsForCluster;
    private getClusterIcon;
    private getClusterIconIndex;
    private getClusterLabel;
    private getMarkerOptionsForPoint;
    private assignAdditionalProperties;
    private assignEventsToMarker;
    private getClickEventName;
    private removeFeaturesFromDataLayers;
    private hideMarkers;
    private showMarkers;
    private removeMarkers;
}
